\documentclass[12pt, letterpaper, notitlepage, onecolumn, twoside, noindent]{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{enumerate}
\usepackage{mathrsfs}
\usepackage{bm}
\usepackage{turnstile}
\usepackage{epsf,graphicx,psfrag}
\usepackage{lscape}
\usepackage{latexsym}
\usepackage{float}
\usepackage{natbib}
\usepackage{setspace}
\usepackage[top=1in, bottom=1in, right=1in, left=1in]{geometry}
\usepackage{url}
\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{}
\chead{}
\rhead{}
\cfoot{\thepage}
\renewcommand{\headrulewidth}{0pt}
  
  
\title{Networks Short Course Homework}
\date{Patrick Rickert}
  
\begin{document}
\maketitle
  
\section*{Data Processing}
<<>>=
setwd("~/Downloads")
load("nigeria.rda")

##Build an adjacency matrix from the data
length(unique(nigeria$receiver))
mat<-matrix(0, nrow = 37, ncol = 37)
rownames(mat)<-sort(unique(nigeria$sender))
colnames(mat)<-sort(unique(nigeria$receiver))
slice = nigeria[nigeria$conflict==1,]
for (i in 1:nrow(slice)){
  a1 = as.character(slice[i, 'sender'])
  a2 = as.character(slice[i, 'receiver'])
  mat[a1,a2] = slice[i, 'conflict']
  
}
diag(mat)<-NA
@

\section*{Measurements and Community Detection}
<<>>=
##Explore different centrality measures
library(igraph)
g = graph_from_adjacency_matrix(mat, 
                                mode='directed')
igraph::degree(g)
eigen_centrality(g, directed = TRUE)
igraph::betweenness(g)
@
\indent It is clear that using various different metrics of centrality, the most important actor in the network is the Nigerian Police. They have the most edges, meaning they were involved in the most conflicts, the highest eigenvector centrality, indicating that they were connected to the most connected nodes, and the highest betweenness score, meaning that the most shortest paths went through the police. 



<<warning = F, message = F>>=
library(PRROC)

library(network,quietly=T)
require(sna)
## Create clusters based on structural equivalence
NigeriaNet <- network(mat, mode = "directed")
clusts <- equiv.clust(NigeriaNet)
## Plot dendrogram
plot(clusts,hang=-1)
## Use K clusters to determine group membership
NigeriaBlock <- blockmodel(NigeriaNet, clusts, k=2)
bmems2 <- NigeriaBlock$block.membership[order(NigeriaBlock$order.vector)]
NigeriaBlock <- blockmodel(NigeriaNet, clusts, k=3)
bmems3 <- NigeriaBlock$block.membership[order(NigeriaBlock$order.vector)]
NigeriaBlock <- blockmodel(NigeriaNet, clusts, k=4)
bmems4 <- NigeriaBlock$block.membership[order(NigeriaBlock$order.vector)]
NigeriaBlock <- blockmodel(NigeriaNet, clusts, k=5)
bmems5 <- NigeriaBlock$block.membership[order(NigeriaBlock$order.vector)]
NigeriaBlock <- blockmodel(NigeriaNet, clusts, k=6)
bmems6 <- NigeriaBlock$block.membership[order(NigeriaBlock$order.vector)]



##Make dataframe for testing
library(reshape2)
data<-melt(mat)
data$groupmembershipk2<-rep(bmems2, 37)
data$groupmembershipk3<-rep(bmems3, 37)
data$groupmembershipk4<-rep(bmems4, 37)
data$groupmembershipk5<-rep(bmems5, 37)
data$groupmembershipk6<-rep(bmems6, 37)
vec<-seq(1,1369, by = 38)
data<-data[-vec,]

library(cvTools)
folds <-cvFolds(nrow(data), K = 10)
data$predictk2 <- rep(0, nrow(data))
data$predictk3 <- rep(0, nrow(data))
data$predictk4 <- rep(0, nrow(data))
data$predictk5 <- rep(0, nrow(data))
data$predictk6 <- rep(0, nrow(data))
##Perform cross validation
set.seed(15)
for(i in 1:10){
  train <- data[folds$subsets[folds$which !=i],]
  test <- data[folds$subsets[folds$which == i],]
  
  mod2<- glm(value~groupmembershipk2, data = train, family = binomial(link="logit"))
  predict2 <-predict(mod2, newdata = test, type = "response")
  data[folds$subsets[folds$which == i],]$predictk2<- predict2
  
  mod3<- glm(value~groupmembershipk3, data = train, family = binomial(link="logit"))
  predict3 <-predict(mod3, newdata = test, type = "response")
  data[folds$subsets[folds$which == i],]$predictk3<- predict3
  
  mod4<- glm(value~groupmembershipk4, data = train, family = binomial(link="logit"))
  predict4 <-predict(mod4, newdata = test, type = "response")
  data[folds$subsets[folds$which == i],]$predictk4<- predict4
  
  mod5<- glm(value~groupmembershipk5, data = train, family = binomial(link="logit"))
  predict5 <-predict(mod5, newdata = test, type = "response")
  data[folds$subsets[folds$which == i],]$predictk5<- predict5
  
  mod6<- glm(value~as.factor(groupmembershipk6), data = train, family = binomial(link="logit"))
  predict6 <-predict(mod6, newdata = test, type = "response")
  data[folds$subsets[folds$which == i],]$predictk6<- predict6
}

fg <- data$predictk2[data$value==1]
bg <- data$predictk2[data$value == 0]
roc2 <- roc.curve(scores.class0 = bg, scores.class1 = fg, curve = T)
pr2 <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)


fg <- data$predictk3[data$value==1]
bg <- data$predictk3[data$value == 0]
roc3 <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr3 <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)


fg <- data$predictk4[data$value==1]
bg <- data$predictk4[data$value == 0]
roc4 <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr4 <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)

fg <- data$predictk5[data$value==1]
bg <- data$predictk5[data$value == 0]
roc5 <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr5 <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)

fg <- data$predictk6[data$value==1]
bg <- data$predictk6[data$value == 0]
roc6 <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
pr6 <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)

### Check AUC
c(roc2$auc, roc3$auc, roc4$auc, roc5$auc, roc6$auc)
c(pr2$auc.integral, pr3$auc.integral, pr4$auc.integral, pr5$auc.integral, pr6$auc.integral)
@
The AUC indicates that 4 or 5 groups should be used. I opt to use four, for simplicity's sake. 

<<warnings = F, message = F>>=
colVec <- c("lightblue", "pink", "green", "grey")

# Assign colors to individual nodes based on block membership
bcols <- colVec[bmems4]


#check colors and membership
head(cbind(bcols,bmems4))

set.seed(5)
# Now plot
vertexSize = degree(NigeriaNet, cmode = 'indegree')/2
plot(NigeriaNet,displaylabels=T,
     vertex.cex=vertexSize,label.cex=.35,edge.col=rgb(150,150,150,100,maxColorValue=255),
     label.pos=5,vertex.col=bcols)

@


\section*{ERGMs}
<<warning = F, message = F>>=
##Run ERGM
set.vertex.attribute(NigeriaNet, "group", bmems4)
library(btergm)
model<-ergm(NigeriaNet~edges + mutual + nodematch("group"))
summary(model)
##Check convergence
mcmc.diagnostics(model)
@
My hypotheses tested in the model are that there is a high degree of reciprocity in the network, which is to say that nodes that send ties to another node are more likely to also receive a tie from that node. Additionally, I expect the node match coefficient on the group variable to be negative, because I expect there to be more conflict between groups than within groups. For example, I expect the militia groups to engage in conflict with the military more than each other. The ERGM results bear this out, and the model diagnostics show that the model converged.


\end{document}